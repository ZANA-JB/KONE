var mysql = require("mysql2");
var bcrypt = require("bcryptjs");
var jwt = require('jsonwebtoken'); 
var config = require('../config');
var connection = require("../database");

const userLoginCheck = async (req, res, next) => {
    console.log("=== D√âBUT userLoginCheck ===");
    console.log("req.body:", req.body);
    
    try {
        // V√©rification des donn√©es d'entr√©e

        if (!req.body || !req.body.email || !req.body.password) {
            console.log("‚ùå Donn√©es manquantes:", {
                body: req.body,
                email: req.body?.email,
                password: req.body?.password ? "pr√©sent" : "absent"
            });
            return res.status(400).json({
                "Error": true, 
                "Message": "Email et mot de passe requis"
            });
        }

        let post = {
            password: req.body.password,
            email: req.body.email
        };

        console.log("‚úÖ Donn√©es valid√©es:", {
            email: post.email,
            password: "pr√©sent"
        });

        // Requ√™te simple pour la structure de ma table users

        let query = "SELECT * FROM users WHERE email = ?"; 
        
        console.log("Ex√©cution de la requ√™te:", query);
        console.log("Param√®tre email:", post.email);

        connection.query(query, [post.email], async (err, rows) => {
            console.log("=== R√âSULTAT DE LA REQU√äTE ===");
            
            if (err) {
                console.error("‚ùå Erreur MySQL:", err);
                return res.status(500).json({
                    "Error": true, 
                    "Message": "Erreur de base de donn√©es: " + err.message
                });
            }

            console.log("Nombre de r√©sultats:", rows ? rows.length : 0);
            console.log("Donn√©es brutes:", rows);

            if (!rows || rows.length === 0) {
                console.log("‚ùå Aucun utilisateur trouv√© pour l'email:", post.email);
                return res.status(401).json({
                    "Error": true,
                    "Message": "Email incorrect"
                });
            }

            let user = rows[0];
            console.log("‚úÖ Utilisateur trouv√©:", {
                users_id: user.users_id,
                nom: user.nom,
                prenom: user.prenom,
                email: user.email,
                password_present: user.password ? "oui" : "non",
                password_length: user.password ? user.password.length : 0
            });

            if (!user.password) {
                console.log("‚ùå Pas de mot de passe dans la base");
                return res.status(500).json({
                    "Error": true,
                    "Message": "Mot de passe non d√©fini pour cet utilisateur"
                });
            }

            try {
                console.log(" Comparaison du mot de passe...");
                console.log(" Mot de passe saisi:", post.password);
                console.log(" Hash en base (d√©but):", user.password.substring(0, 10) + "...");
                
                let isMatch = await bcrypt.compare(post.password, user.password);
                console.log("R√©sultat comparaison:", isMatch);

                if (!isMatch) {
                    console.log("‚ùå Mot de passe incorrect");
                    return res.status(401).json({
                        "Error": true, 
                        "Message": "Mot de passe incorrect"
                    });
                }

                console.log("‚úÖ Authentification r√©ussie");

                // G√©n√©rer le token JWT

                let tokenPayload = {
                    id_users: user.id_users,
                    email: user.email,
                    nom: user.nom,
                    prenom: user.prenom,
                    role: user.role    // Ajout du r√¥le dans le token
                };
                
                console.log("üé´ G√©n√©ration du token avec payload:", tokenPayload);
                let token = jwt.sign(tokenPayload, config.secret, { expiresIn: '24h' });   
                console.log("üé´ Token g√©n√©r√© (d√©but):", token.substring(0, 20) + "...");

                // Pr√©paration de l'objet utilisateur √† envoyer au frontend///
                
const userData = {
    users_id: user.id_users,  // ‚ö†Ô∏è C'est ici qu'on ajoute l'ID
    email: user.email,
    nom: user.nom,
    prenom: user.prenom,
    role: user.role          // Ajout du r√¥le pour differencier Admin et Etudiant
};

                // POUR LE D√âBOGAGE, ON SAUTE LA SAUVEGARDE EN BASE ET ON RETOURNE DIRECTEMENT
                // Envoie une seule r√©ponse et stoppe la fonction

return res.json({
    success: true,
    id_users: user.id_users, 
    email: user.email,
    nom: user.nom,
    prenom: user.prenom,
    role: user.role,      //  renvoie le r√¥le (0 ou 1)
    message: 'Connexion r√©ussie',
    token: token,
});


            } catch (bcryptError) {
                console.error("‚ùå Erreur bcrypt:", bcryptError);
                return res.status(500).json({
                    "Error": true, 
                    "Message": "Erreur lors de la v√©rification du mot de passe"
                });
            }
        });

    } catch (error) {
        console.error("‚ùå Erreur g√©n√©rale:", error);
        return res.status(500).json({
            "Error": true, 
            "Message": "Erreur interne: " + error.message
        });
    }
};

module.exports = userLoginCheck;